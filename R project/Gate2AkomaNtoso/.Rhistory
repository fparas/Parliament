fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
for (j in 1:length(contentList)){
content[j,1]<-xmlValue(contentList[[j]][[2]],encoding = "utf-8")
content[j,2]<-xmlValue(contentList[[j]][[1]][[1]],encoding = "utf-8")
}
content<-matrix(ncol=2,nrow=length(contentList))
for (j in 1:length(contentList)){
content[j,1]<-xmlValue(contentList[[j]][[2]],encoding = "utf-8")
content[j,2]<-xmlValue(contentList[[j]][[1]][[1]],encoding = "utf-8")
}
content
outputList<-list(date,speeches=as.list(content))
outputList
(toJSON(x = outputList)
)
fix(gate2JSON)
fix(gate2JSON)
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
gate2JSON()
fix(gate2JSON)
fix(gate2JSON)
fix(gate2JSON)
matrix(1,2)
matrix(1:2,1:2)
matrix(2,2)
matrix(1:2,2)
matrix(2,2)
matrix(2)
matrix(2,2,2,2)
rbind(matrix(2,2,2,2),matrix(3,3,3,3))
rbind(matrix(2,2,2,2),matrix(1,1,1,1))
rbind(matrix(2,2,2,2),matrix(2,1,1,1))
rbind(matrix(2,2,2,2),matrix(2,2,1,1))
rbind(matrix(2,2,2,2),matrix(2,2,2,2))
matrix (c(2,2))
matrix (c(2,2),c(2,2))
matrix (1:4,2,2)
rbind(matrix (1:4,2,2),matrix (4:8,2,2))
rbind(matrix (1:4,2,2),matrix (5:8,2,2))
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
date
content$Date
content$Date[1]
content$Date[1,]
content$Date[1,]<-1
content$Date[1]<-1
fix(gate2JSON)
remove(content)
gate2JSON()
gate2JSON()
content$Date[1]
content
content<-data.frame()
cl
content<-value
content
content<-data.frame()
content$Date[1]<-value
content$Date<-value
date
fix(gate2JSON)
gate2JSON()
temp<-data.frame()
temp$Me[1]<-"1"
temp$Me[1,]<-"1"
temp[1]$Me<-"1"
temp<-data.frame(row.names = "Me")
temp[1]$Me<-"1"
temp$Me[1]<-"1"
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
xmlValue(contentList[[j-1]][[2]]
)
content
content
gate2JSON()
xmlValue(contentList[[j-1]][[2]]
)
class(xmlValue(contentList[[j-1]][[2]])
)
content
content<-data.frame(colnames = c("Speech,Parlmember,Date"))
content$Speech[1]<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
content$Speech[2]<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
content$Speech[3]<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
content$Speech[4]<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
content$Speech[[4]]<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
content$Speech[[2]]<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
content
fix(gate2JSON)
gate2JSON()
content
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
content
fix(gate2JSON)
data.frame(bla,blabla)
data.frame(bla="1",blabla="2")
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix (gate2akomantoso)
fix(gate2JSON)
fix (gate2akomantoso)
gate2JSON()
gate2JSON()
gate2JSON()
fix (gate2akomantoso)
gate2JSON()
content
fix(gate2JSON)
gate2JSON()
contentList
contentSpeech<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
contentList
contentSpeech
contentParlmember<-xmlValue(contentList[[j-1]][[1]][[1]],encoding = "utf-8")
content<-rbind(content,data.frame(Speech=contentSpeech,Parlmember=contentParlmember,Date="none"))
content<-data.frame(Speech="none",Parlmember="none",Date=processedname)
content<-data.frame(Speech="none",Parlmember="none",Date="1-1-2000")
content<-rbind(content,data.frame(Speech=contentSpeech,Parlmember=contentParlmember,Date="none"))
content
View(content)
contentSpeech
contentParlmember
data.frame(contentSpeech,contentParlmember)
encode(utf-8(data.frame(contentSpeech,contentParlmember))
)
class(contentSpeech)
as.character(data.frame(contentSpeech,contentParlmember))
data.frame(contentSpeech,contentParlmember)
test<-"εο"
test2<-"εοεο"
data.frame(test,test2)
temp1<=data.frame(test,test2)
temp1=data.frame(test,test2)
temp1
temp1[1,]
temp1[1]
temp1[,1]
temp[1,1]
temp[1,2]
temp[1]
temp
temp1=data.frame(test,test2)
temp1
temp1[e]
temp1[1]
temp1[1,]
temp1[,`]
temp1[,1]
Q
)
temp1
temp1[1,]
temp1[1,]$test
temp1[1,]$test2
test<-"φωτης"
test<-"φωτηςλεμε"
test2<-"φωτηςλεμε"
temp1=data.frame(test,test2)
temp1
encoding
enc2utf-8
enc2utf8(temp1)
enc2utf8("φώτης")
contentSpeech
enc2utf8(contentSpeech)
enc2native(contentSpeech)
data.frame(enc2utf8(contentSpeech),enc2utf8(contentParlmember))
data.frame(enc2native(contentSpeech),enc2native(contentParlmember))
data.frame(contentSpeech,contentParlmember)
print(data.frame(contentSpeech,contentParlmember))
iconv()
fix(toLocalEncoding)
temp<-data.frame(contentSpeech,contentParlmember)
toLocalEncoding(temp)
fix(toLocalEncoding)
sessionInfo()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
sessionInfo()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
temp<-data.frame(contentSpeech,contentParlmember)
temp
Sys.setlocale("LC_COLLATE", 'en_GB.UTF-8')
Sys.setlocale("LC_COLLATE", 'en_GB.UTF-8')
Encode
Encode()
Sys.setlocale("LC_ALL", 'en_GB.UTF-8')
data.frame(contentSpeech,contentParlmember)
iconv(contentSpeech, "GREEK", "UTF-8")
Encoding(contentSpeech)
matrix(contentSpeech,contentParlmember)
c(contentSpeech,contentParlmember)
class(c(contentSpeech,contentParlmember))
matrix(contentSpeech,contentParlmember)
matrix(contentSpeech)
cbind(matrix(contentSpeech),matrix(contentParlmember)
)
fix(toLocalEncoding)
fix
fix(gate2JSON)
cbind(matrix(contentSpeech),matrix(contentParlmember)
)
temp<-cbind(matrix(contentSpeech),matrix(contentParlmember)
temp<-cbind(matrix(contentSpeech),matrix(contentParlmember))
temp<-cbind(matrix(contentSpeech),matrix(contentParlmember))
tmep
temop
temp
rbind(temp,matrix("1-1-1","")
)
temp<-cbind(c(contentSpeech),c(contentParlmember))
temp
temp<-rbind(c("date"),c(""))
temp<-cbind(c(contentSpeech),c(contentParlmember))
temp<-rbind(temp,cbind(c("date"),c("")))
temp
temp<-cbind(c(contentSpeech,contentParlmember))
temp
temp<-rbind(c(contentSpeech,contentParlmember))
temp
temp<-cbind(c(contentSpeech,contentParlmember))
temp
temp<-rbind(c(contentSpeech,contentParlmember))
temp
fix(gate2JSON)
temp<-rbind(temp,c("date",""))
temp
fix(gate2JSON)
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
fix(gate2JSON)
gate2JSON()
q
gate2JSON()
fix(gate2JSON)
fix(gate2JSON)
locale
Sys.setlocale("LC_CTYPE")
Sys.setlocale("LC_CTYPE",el_GR.UTF-8)
Sys.setlocale("LC_CTYPE","el_GR.UTF-8")
fix(gate2akomantoso)
fix(gate2JSON)
fix(gate2akomantoso)
Sys.getlocale()
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
Sys.setlocale("LC_TIME", "Greek")
Sys.setlocale("LC_ALL", "Greek")
Sys.setlocale("LC_ALL", "en_GR")
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
Sys.setlocale(category = "LC_ALL", locale = "UTF-8")
Sys.setlocale(category = "LC_ALL", locale = "english_us.65001")
Sys.setlocale(category = "LC_ALL", locale = "american_usa")
gate2JSON()
setwd("C:/Users/fotis.paraschiakos/Dropbox/Public/temp/testing")
fix(writeUTF*)
fix(writeUTF8)
fix(writeUTF8)
test
ab
temp
class(temp)
class(temp2)
class(temp)
temp
writeUTF8(temp)
fix(gate2JSON)
gate2JSON()
temp
cat(temp)
temp2<data.frame(temp)
temp
class(temp)
temp2<data.frame(temp)
temp2<-data.frame(temp)
View(temp2)
cat(temp2)
class(temp2)
write.csv(temp)
write.csv(temp2)
writeUTF8(temp)
writeUTF8(temp2)
write.csv(temp)
writeUTF8(temp)
writeUTF8(write.csv(temp)
)
writeUTF8(temp)
fix(gate2JSON)
fix(w)
remove(w)
fix(writeUTF8)
gate2JSON()
gate2JSON()
fix(writeUTF8)
gate2JSON()
gate2JSON()
fix(writeUTF8)
gate2JSON()
fix(writeUTF8)
gate2JSON()
edit gate2akomantoso
fix(gate2akomantoso)
fix(gate2akomantoso)
gate2JSON
gate2akomantoso.phase1<-gate2JSON
gate2akomantoso.phase2<-gate2akomantoso
fremove(gate2akomantoso)
remove(gate2akomantoso)
remove(gate2JSON)
fix(xml2json)
remove(gate2JSON)
remove(xmlJSON)
remove(xml2json)
View(greekMPinformation)
fix(gate2akomantoso.phase2)
greekMPInformation.final <- read.csv("C:/Users/fotis.paraschiakos/Downloads/greekMPInformation-final.csv", header=FALSE)
View(greekMPInformation.final)
gate2akomantoso.phase2(greekMPInformation.final)
fix(gate2akomantoso.phase2)
fix(gate2akomantoso.phase2)
greekMPInformation.final <- read.csv("C:/Users/fotis.paraschiakos/Downloads/greekMPInformation-final.csv")
View(greekMPInformation.final)
gate2akomantoso.phase2(greekMPInformation.final)
fix(gate2akomantoso.phase2)
fix(gate2akomantoso.phase2)
View(greekMPInformation.final)
fix(gate2akomantoso.phase2)
fix(gate2akomantoso.phase2)
View(greekMPInformation.final)
greekMPInformation.final$lowercasename[greekMPInformation.final$id="1"]
greekMPInformation.final$lowercasename[greekMPInformation.final$id=="1"]
greekMPInformation.final$lowercasename[greekMPInformation.final$id=="2"]
greekMPInformation.final$lowercasename[greekMPInformation.final$id=="3"]
view(greekMPInformation.final$lowercasename[greekMPInformation.final$id=="3"])
View(dataset)
view(data.frame(greekMPInformation.final$lowercasename[greekMPInformation.final$id=="3"])
)
View(greekMPInformation.final$lowercasename[greekMPInformation.final$id=="3"])
fix(gate2akomantoso.phase2)
fix(gate2akomantoso.phase2)
fix(gate2JSON)
load("C:/Users/fotis/workspace/Parliament/R project/Gate2AkomaNtoso/.RData")
fix(gate2akomantoso.phase1)
fix(gate2akomantoso.phase1)
fix(gate2akomantoso.phase1)
setwd("\GateFiles")
setwd("GateFiles")
getwd()
setwd(.)
setwd("C:/Users/fotis/workspace/Parliament/R project/Gate2AkomaNtoso")
getwd()
list.files("GateFiles")
temp<-list.files("GateFiles")
temp
xmlParse(list.files[1])
install.packages ("XML")
require ("XML")
xmlParse(list.files[1])
list.files
list.files[1]
xmlParse(temp[1])
temp[1]
read.csv(temp[1])
list.files("gateFiles",include.dirs = TRUE)
list.files("gateFiles",include.dirs = TRUE)
fileList<-list.files("gateFiles",include.dirs = TRUE)
read.csv(fileList[1])
fileList<-list.files("gateFiles",full.names=TRUE)
read.csv(fileList[1])
XMLpaRSE(fileList[1])
XMLpARSE(fileList[1])
xmlParse(fileList[1])
####PHASE 1##########
install.packages ("XML")
require ("XML")
fileList<-list.files("gateFiles",include.dirs = TRUE)
finalContent<-matrix(ncol = 2,)
for (i in 1:length(fileList)){
outputList<-list()
name<-fileList[i]
processedName=gsub(".doc.gate","",name)
currentConf<-xmlParse(name,encoding = "utf-8")
contentList<-getNodeSet(currentConf,path = "//Speech | //ChairmanSpeech")
content<-rbind(c("Date",processedName))
for (j in 2:length(contentList)+1){
contentSpeech<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
contentParlmember<-xmlValue(contentList[[j-1]][[1]][[1]],encoding = "utf-8")
content<-rbind(content,c(contentSpeech,contentParlmember))
}
finalContent<-rbind(finalContent,content)
}
print(finalContent)
writeUTF8(finalContent)
install.packages("XML")
####PHASE 1##########
install.packages ("XML")
require ("XML")
fileList<-list.files("gateFiles",include.dirs = TRUE)
finalContent<-matrix(ncol = 2,)
for (i in 1:length(fileList)){
outputList<-list()
name<-fileList[i]
processedName=gsub(".doc.gate","",name)
currentConf<-xmlParse(name,encoding = "utf-8")
contentList<-getNodeSet(currentConf,path = "//Speech | //ChairmanSpeech")
content<-rbind(c("Date",processedName))
for (j in 2:length(contentList)+1){
contentSpeech<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
contentParlmember<-xmlValue(contentList[[j-1]][[1]][[1]],encoding = "utf-8")
content<-rbind(content,c(contentSpeech,contentParlmember))
}
finalContent<-rbind(finalContent,content)
}
print(finalContent)
writeUTF8(finalContent)
finalContent
xmlParse(fileList[1])
(fileList[1]
fileList[1]
name<-fileList[1]
name
currentConf<-xmlParse(name,encoding = "utf-8")
xmlParse("1-2-2012.doc.gate")
fileList
####PHASE 1##########
install.packages ("XML")
require ("XML")
fileList<-list.files("gateFiles",full.names = TRUE)
finalContent<-matrix(ncol = 2,)
for (i in 1:length(fileList)){
outputList<-list()
name<-fileList[i]
processedName=gsub(".doc.gate","",name)
currentConf<-xmlParse(name,encoding = "utf-8")
contentList<-getNodeSet(currentConf,path = "//Speech | //ChairmanSpeech")
content<-rbind(c("Date",processedName))
for (j in 2:length(contentList)+1){
contentSpeech<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
contentParlmember<-xmlValue(contentList[[j-1]][[1]][[1]],encoding = "utf-8")
content<-rbind(content,c(contentSpeech,contentParlmember))
}
finalContent<-rbind(finalContent,content)
}
print(finalContent)
writeUTF8(finalContent)
install.packages("XML")
####PHASE 1##########
install.packages ("XML")
require ("XML")
fileList<-list.files("gateFiles",full.names = TRUE)
finalContent<-matrix(ncol = 2,)
for (i in 1:length(fileList)){
outputList<-list()
name<-fileList[i]
processedName=gsub(".doc.gate","",name)
currentConf<-xmlParse(name,encoding = "utf-8")
contentList<-getNodeSet(currentConf,path = "//Speech | //ChairmanSpeech")
content<-rbind(c("Date",processedName))
for (j in 2:length(contentList)+1){
contentSpeech<-xmlValue(contentList[[j-1]][[2]],encoding = "utf-8")
contentParlmember<-xmlValue(contentList[[j-1]][[1]][[1]],encoding = "utf-8")
content<-rbind(content,c(contentSpeech,contentParlmember))
}
finalContent<-rbind(finalContent,content)
}
print(finalContent)
writeUTF8(finalContent)
View(finalContent)
finalContent[1:50]
